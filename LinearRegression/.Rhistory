names(data) <- c("Carrier", "Distance", "Time", "AvgPrice")
mseDistanceLowerCount <- 0
mseTimeLowerCount <- 0
timePredMap <- new.env(hash = T, parent = emptyenv())
timePredFor <- mean(data$Time)
distancePredMap <- new.env(hash = T, parent = emptyenv())
distancePredFor <- mean(data$Distance)
for(carrier in unique(data$Carrier)){
dfForCarrier <- data[which(data$Carrier == carrier),]
lrDistance <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Distance)
summaryDistance <- summary(lrDistance)
mseDistance <- mean(summaryDistance$residuals^2)
lrTime <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Time)
summaryTime <- summary(lrTime)
mseTime <- mean(summaryTime$residuals^2)
if(mseTime > mseDistance){
mseDistanceLowerCount <- mseDistanceLowerCount + 1
} else {
mseTimeLowerCount <- mseTimeLowerCount + 1
}
jpeg(paste(carrier,".jpeg"))
par(mfrow = c(2,1))
plot(dfForCarrier$Distance, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
xlab=paste("Distance   ","Intercept :", lrDistance$coefficients[[1]],
"  Slope: ", lrDistance$coefficients[[2]]))
abline(lrDistance, col='green')
plot(dfForCarrier$Time, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
xlab=paste("Distance   ","Intercept :", lrTime$coefficients[[1]],
"  Slope: ", lrTime$coefficients[[2]]))
abline(lrTime, col='red')
dev.off()
timePredVal <- lrTime$coefficients[[2]]*timePredFor +  lrTime$coefficients[[1]]
timePredMap[[carrier]] <- timePredVal
distancePredVal <- lrDistance$coefficients[[2]]*distancePredFor +  lrDistance$coefficients[[1]]
distancePredMap[[carrier]] <- distancePredVal
}
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[x]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",x))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",x))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(finalResultList, sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
finalResultList
# http://stats.stackexchange.com/questions/107643/how-to-get-the-value-of-mean-squared-error-in-a-linear-regression-in-r
```
# Airlines active in 2015
HA, EV, MQ, OO, US, B6, WN, UA, DL, NK, VX, AS, F9, AA
(Of these, NK does not have any data in 2010-2014)
# Graphs showing a linear fit of the variable to price for each airline
# Cheapest Airline
# Is distance traveled or flight time a better variable?
# Why?
# ANALYSIS
# Conclusion:
finalResultList
carName
finalResultList
finalResultList[1]
finalResultList[2]
for (s in finalResultList) print s
for(s in finalResultList) print s
for(s in finalResultList) print(s)
ccc <- c(1,2,3,4,5,6)
ccc
for(s in ccc) print(s)
for(s in finalResultList) {
print(s)
}
require(dplyr)
require(ggplot2)
library(R.utils)
# Read data folder name from command line arguments
#args <- commandArgs(trailingOnly = TRUE)
#outputFolder <- args[1]
outputFolder <- "outputPseudo"
files <- dir(outputFolder, pattern='part-r-', full.names = TRUE)
partOutputs <- lapply(files, read.csv, header=FALSE, sep="\t")
data <- bind_rows(partOutputs)
# Set headers
names(data) <- c("Carrier", "Distance", "Time", "AvgPrice")
mseDistanceLowerCount <- 0
mseTimeLowerCount <- 0
timePredMap <- new.env(hash = T, parent = emptyenv())
timePredFor <- mean(data$Time)
distancePredMap <- new.env(hash = T, parent = emptyenv())
distancePredFor <- mean(data$Distance)
for(carrier in unique(data$Carrier)){
dfForCarrier <- data[which(data$Carrier == carrier),]
lrDistance <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Distance)
summaryDistance <- summary(lrDistance)
mseDistance <- mean(summaryDistance$residuals^2)
lrTime <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Time)
summaryTime <- summary(lrTime)
mseTime <- mean(summaryTime$residuals^2)
if(mseTime > mseDistance){
mseDistanceLowerCount <- mseDistanceLowerCount + 1
} else {
mseTimeLowerCount <- mseTimeLowerCount + 1
}
#  par(mfrow = c(2,1))
#
# plot(dfForCarrier$Distance, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#      xlab=paste("Distance   ","Intercept :", lrDistance$coefficients[[1]],
#                 "  Slope: ", lrDistance$coefficients[[2]]))
# abline(lrDistance, col='green')
#
#  plot(dfForCarrier$Time, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#       xlab=paste("Distance   ","Intercept :", lrTime$coefficients[[1]],
#                  "  Slope: ", lrTime$coefficients[[2]]))
#  abline(lrTime, col='red')
timePredVal <- lrTime$coefficients[[2]]*timePredFor +  lrTime$coefficients[[1]]
timePredMap[[carrier]] <- timePredVal
distancePredVal <- lrDistance$coefficients[[2]]*distancePredFor +  lrDistance$coefficients[[1]]
distancePredMap[[carrier]] <- distancePredVal
}
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(finalResultList, sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
for(s in finalResultList) {
print(s)
}
require(dplyr)
require(ggplot2)
library(R.utils)
# Read data folder name from command line arguments
#args <- commandArgs(trailingOnly = TRUE)
#outputFolder <- args[1]
outputFolder <- "outputPseudo"
files <- dir(outputFolder, pattern='part-r-', full.names = TRUE)
partOutputs <- lapply(files, read.csv, header=FALSE, sep="\t")
data <- bind_rows(partOutputs)
# Set headers
names(data) <- c("Carrier", "Distance", "Time", "AvgPrice")
mseDistanceLowerCount <- 0
mseTimeLowerCount <- 0
timePredMap <- new.env(hash = T, parent = emptyenv())
timePredFor <- mean(data$Time)
distancePredMap <- new.env(hash = T, parent = emptyenv())
distancePredFor <- mean(data$Distance)
for(carrier in unique(data$Carrier)){
dfForCarrier <- data[which(data$Carrier == carrier),]
lrDistance <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Distance)
summaryDistance <- summary(lrDistance)
mseDistance <- mean(summaryDistance$residuals^2)
lrTime <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Time)
summaryTime <- summary(lrTime)
mseTime <- mean(summaryTime$residuals^2)
if(mseTime > mseDistance){
mseDistanceLowerCount <- mseDistanceLowerCount + 1
} else {
mseTimeLowerCount <- mseTimeLowerCount + 1
}
#  par(mfrow = c(2,1))
#
# plot(dfForCarrier$Distance, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#      xlab=paste("Distance   ","Intercept :", lrDistance$coefficients[[1]],
#                 "  Slope: ", lrDistance$coefficients[[2]]))
# abline(lrDistance, col='green')
#
#  plot(dfForCarrier$Time, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#       xlab=paste("Distance   ","Intercept :", lrTime$coefficients[[1]],
#                  "  Slope: ", lrTime$coefficients[[2]]))
#  abline(lrTime, col='red')
timePredVal <- lrTime$coefficients[[2]]*timePredFor +  lrTime$coefficients[[1]]
timePredMap[[carrier]] <- timePredVal
distancePredVal <- lrDistance$coefficients[[2]]*distancePredFor +  lrDistance$coefficients[[1]]
distancePredMap[[carrier]] <- distancePredVal
}
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ",")[[2]], sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
for(s in finalResultList) {
print(s)
}
require(dplyr)
require(ggplot2)
library(R.utils)
# Read data folder name from command line arguments
#args <- commandArgs(trailingOnly = TRUE)
#outputFolder <- args[1]
outputFolder <- "outputPseudo"
files <- dir(outputFolder, pattern='part-r-', full.names = TRUE)
partOutputs <- lapply(files, read.csv, header=FALSE, sep="\t")
data <- bind_rows(partOutputs)
# Set headers
names(data) <- c("Carrier", "Distance", "Time", "AvgPrice")
mseDistanceLowerCount <- 0
mseTimeLowerCount <- 0
timePredMap <- new.env(hash = T, parent = emptyenv())
timePredFor <- mean(data$Time)
distancePredMap <- new.env(hash = T, parent = emptyenv())
distancePredFor <- mean(data$Distance)
for(carrier in unique(data$Carrier)){
dfForCarrier <- data[which(data$Carrier == carrier),]
lrDistance <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Distance)
summaryDistance <- summary(lrDistance)
mseDistance <- mean(summaryDistance$residuals^2)
lrTime <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Time)
summaryTime <- summary(lrTime)
mseTime <- mean(summaryTime$residuals^2)
if(mseTime > mseDistance){
mseDistanceLowerCount <- mseDistanceLowerCount + 1
} else {
mseTimeLowerCount <- mseTimeLowerCount + 1
}
#  par(mfrow = c(2,1))
#
# plot(dfForCarrier$Distance, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#      xlab=paste("Distance   ","Intercept :", lrDistance$coefficients[[1]],
#                 "  Slope: ", lrDistance$coefficients[[2]]))
# abline(lrDistance, col='green')
#
#  plot(dfForCarrier$Time, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#       xlab=paste("Distance   ","Intercept :", lrTime$coefficients[[1]],
#                  "  Slope: ", lrTime$coefficients[[2]]))
#  abline(lrTime, col='red')
timePredVal <- lrTime$coefficients[[2]]*timePredFor +  lrTime$coefficients[[1]]
timePredMap[[carrier]] <- timePredVal
distancePredVal <- lrDistance$coefficients[[2]]*distancePredFor +  lrDistance$coefficients[[1]]
distancePredMap[[carrier]] <- distancePredVal
}
carName <- "xx"
minPrice <- 999999
resultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
resultList <- c(resultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
resultList <- c(resultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
resultList <- sort(resultList)
finalResultList <- paste(strsplit(resultList, ",")[[2]], sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
for(s in finalResultList) {
print(s)
}
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ",")[[2]], sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
for(s in finalResultList) {
print(s)
}
mseDistanceLowerCount <- 0
mseTimeLowerCount <- 0
timePredMap <- new.env(hash = T, parent = emptyenv())
timePredFor <- mean(data$Time)
distancePredMap <- new.env(hash = T, parent = emptyenv())
distancePredFor <- mean(data$Distance)
for(carrier in unique(data$Carrier)){
dfForCarrier <- data[which(data$Carrier == carrier),]
lrDistance <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Distance)
summaryDistance <- summary(lrDistance)
mseDistance <- mean(summaryDistance$residuals^2)
lrTime <- lm(dfForCarrier$AvgPrice ~ dfForCarrier$Time)
summaryTime <- summary(lrTime)
mseTime <- mean(summaryTime$residuals^2)
if(mseTime > mseDistance){
mseDistanceLowerCount <- mseDistanceLowerCount + 1
} else {
mseTimeLowerCount <- mseTimeLowerCount + 1
}
#  par(mfrow = c(2,1))
#
# plot(dfForCarrier$Distance, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#      xlab=paste("Distance   ","Intercept :", lrDistance$coefficients[[1]],
#                 "  Slope: ", lrDistance$coefficients[[2]]))
# abline(lrDistance, col='green')
#
#  plot(dfForCarrier$Time, dfForCarrier$AvgPrice,ylab="Average Ticket Price",
#       xlab=paste("Distance   ","Intercept :", lrTime$coefficients[[1]],
#                  "  Slope: ", lrTime$coefficients[[2]]))
#  abline(lrTime, col='red')
timePredVal <- lrTime$coefficients[[2]]*timePredFor +  lrTime$coefficients[[1]]
timePredMap[[carrier]] <- timePredVal
distancePredVal <- lrDistance$coefficients[[2]]*distancePredFor +  lrDistance$coefficients[[1]]
distancePredMap[[carrier]] <- distancePredVal
}
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ",")[[2]], sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
for(s in finalResultList) {
print(s)
}
finalResultList <- c()
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ",")[[2]], sep = ",", rank(finalResultList))
cat("Cheapest carrier : ", carName)
finalResultList
strsplit(finalResultList, ",")[[2]]
strsplit(finalResultList, ",")
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ","), sep = ",", rank(finalResultList))
finalResultList
finalResultList <- sort(finalResultList)
finalResultList <- paste(strsplit(finalResultList, ","), sep = ",", rank(finalResultList))
finalResultList
carName <- "xx"
minPrice <- 999999
finalResultList <- c()
if(mseTimeLowerCount > mseDistanceLowerCount){
# get best price from TIME
for(uc in unique(data$Carrier)){
if(timePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- timePredMap[[uc]]
}
finalResultList <- c(finalResultList, paste(timePredMap[[uc]],sep = ",",uc))
}
} else {
# get best price from DISTANCE
for(uc in unique(data$Carrier)){
if(distancePredMap[[uc]] < minPrice){
carName <- uc
minPrice <- distancePredMap[[uc]]
}
}
finalResultList <- c(finalResultList, paste(distancePredMap[[uc]],sep = ",",uc))
}
finalResultList <- sort(finalResultList)
finalResultList
strsplit(finalResultList, ",")
finalResultList
strsplit(finalResultList, ",")[1]
strsplit(finalResultList, ",")[[1]]
strsplit(finalResultList, ",")[[1]][2]
strsplit(finalResultList, ",")[2]
strsplit(finalResultList, ",")[2][2]
strsplit(finalResultList, ",")[][2]
strsplit(finalResultList, ",")[2][2]
strsplit(finalResultList, ",")[[1]][2]
strsplit(finalResultList, ",")[[2]][2]
finalResultList <- paste(finalResultList, sep = ",", rank(finalResultList))
finalResultList
strsplit(finalResultList, ",")
strsplit(finalResultList, ",")[1]
for (x in strsplit(finalResultList, ",")) x[3]
for (x in strsplit(finalResultList, ",")) print(x[3])
for (x in strsplit(finalResultList, ",")) print(x[2])
for (x in strsplit(finalResultList, ",")) print(paste(x[2],x[3]))
library(pander)
install.packages('pander')
library(pander)
pander(strsplit(finalResultList, ","))
for (x in strsplit(finalResultList, ",")) {
print(paste(x[2],x[3]))
}
mytest <- c(1,2)
bindr(c(3,4))
